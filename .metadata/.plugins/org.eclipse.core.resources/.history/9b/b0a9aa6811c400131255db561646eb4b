#include "MutualAuthenticationChip.h"

#include "cryptopp/dh.h"
using Cryptopp::DH;

void MutualAuthenticationChip::GenerateKeyPairs(){
	//Automaticly Seeded Randomness Pool.
	//This class seeds itself using an operating system provided RNG.
	AutoSeededRandomPool rnd;
	this->dh.AccessGroupParameters().Initialize(this->p, this->q, this->g);
	this->privateKey(dh.PrivateKeyLength());
	this->publicKey(dh.PublicKeyLength());
	this->dh.GenerateKeyPair(rnd, this->privateKey, this->publicKey);
}

void MutualAuthenticationChip::GenerateEphemeraleKeys(){
    Integer a = Integer(rng, keySize); //random a
    byte *aEncoded;
    a.Encode(aEncoded, keySize); //change Integer to byte
    this->ephemeralPrivateKey = Hash::getSHA1(aEncoded, keySize); //ha = H(a)
    CryptoPP::Integer exponent(this->ephemeralPrivateKey, keySize);
    CryptoPP::Integer cA = a_exp_b_mod_c(g, exponent, p);   //ca = g^H(a)
    cA.Encode(publicKey, keySize);
}
